{"version":3,"sources":["components/Filter/Filter.module.css","components/ContactList/ContactList.module.css","redux/contacts/contacts-selector.js","redux/contacts/contacts-actions.js","components/ContactForm/ContactForm.js","components/Filter/Filter.js","components/ContactList/ContactList.js","App.js","redux/contacts/contacts-reducer.js","redux/store.js","index.js","components/ContactForm/ContactForm.module.css"],"names":["module","exports","getContacts","state","contacts","items","getFilter","filter","getVisibleContacts","normalizeFilter","toLowerCase","trim","contact","name","includes","contactsActions","addContact","createAction","number","payload","id","nanoid","deleteContact","changeFilter","ContactForm","onSubmit","useState","setName","setNumber","dispatch","useDispatch","useSelector","e","preventDefault","map","alert","actions","className","s","form","label","type","pattern","title","required","value","onChange","currentTarget","inputName","inputNumber","button","Filter","header","filterInput","ContactList","list","listItem","onClick","App","createReducer","_","combineReducers","persistConfig","key","storage","blacklist","store","configureStore","reducer","persistReducer","contactsReducer","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","concat","logger","devTools","process","persistor","persistStore","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.6fe599db.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"filterInput\":\"Filter_filterInput__T3XEV\",\"header\":\"Filter_header__226Yt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__3-Krr\",\"listItem\":\"ContactList_listItem__Cp0uB\"};","export const getContacts = state => state.contacts.items;\nexport const getFilter = state => state.contacts.filter;\n\nexport const getVisibleContacts = state => {\n  const contacts = getContacts(state);\n  const filter = getFilter(state);\n  const normalizeFilter = filter.toLowerCase().trim();\n\n  return contacts.filter(contact =>\n    contact.name.toLowerCase().includes(normalizeFilter)\n  );\n};\n","import { nanoid } from 'nanoid';\nimport { createAction } from '@reduxjs/toolkit';\n\nconst addContact = createAction('contacts/add', ({ name, number }) => ({\n  payload: {\n    id: nanoid(),\n    name,\n    number,\n  },\n}));\n\nconst deleteContact = createAction('contacts/delete');\n\nconst changeFilter = createAction('contacts/changeFilter');\n\nconst contactsActions = { addContact, deleteContact, changeFilter };\nexport default contactsActions;\n","import { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { nanoid } from 'nanoid';\nimport { getContacts } from '../../redux/contacts/contacts-selector';\nimport actions from '../../redux/contacts/contacts-actions';\nimport s from './ContactForm.module.css';\n\nfunction ContactForm({ onSubmit }) {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const dispatch = useDispatch();\n  const contacts = useSelector(getContacts);\n\n  const handleChangeName = e => {\n    setName(e.currentTarget.value);\n  };\n\n  const handleChangeNumber = e => {\n    setNumber(e.currentTarget.value);\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    contacts.map(contact => contact.name).includes(name) ||\n    contacts.map(contact => contact.number).includes(number)\n      ? alert(`${name} is already in contacts.`)\n      : dispatch(actions.addContact({ id: nanoid(), name, number }));\n\n    setNumber('');\n    setName('');\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className={s.form}>\n      <label className={s.label}>\n        Name\n        <input\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n          value={name}\n          onChange={handleChangeName}\n          className={s.inputName}\n        />\n      </label>\n      <label className={s.label}>\n        Number\n        <input\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n          value={number}\n          onChange={handleChangeNumber}\n          className={s.inputNumber}\n        />\n      </label>\n      <button type=\"submit\" className={s.button}>\n        Add contact\n      </button>\n    </form>\n  );\n}\n\nexport default ContactForm;\n","import { useSelector, useDispatch } from 'react-redux';\nimport actions from '../../redux/contacts/contacts-actions';\nimport { getFilter } from '../../redux/contacts/contacts-selector';\nimport s from './Filter.module.css';\n\nfunction Filter() {\n  const value = useSelector(getFilter);\n  const dispatch = useDispatch();\n\n  return (\n    <div>\n      <h4 className={s.header}>Find contacts by name</h4>\n      <input\n        type=\"text\"\n        name=\"filter\"\n        value={value}\n        onChange={e => dispatch(actions.changeFilter(e.currentTarget.value))}\n        className={s.filterInput}\n      />\n    </div>\n  );\n}\n\nexport default Filter;\n","import { useSelector, useDispatch } from 'react-redux';\nimport { getVisibleContacts } from '../../redux/contacts/contacts-selector';\nimport actions from '../../redux/contacts/contacts-actions';\nimport s from './ContactList.module.css';\n\nfunction ContactList() {\n  const contacts = useSelector(getVisibleContacts);\n  const dispatch = useDispatch();\n\n  const onDeleteContact = id => dispatch(actions.deleteContact(id));\n\n  return (\n    <div>\n      <ul className={s.list}>\n        {contacts.map(contact => (\n          <li key={contact.id} className={s.listItem}>\n            {contact.name}: {contact.number}\n            <button onClick={() => onDeleteContact(contact.id)}>Delete</button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n\nexport default ContactList;\n","import ContactForm from './components/ContactForm/ContactForm';\nimport Filter from './components/Filter/Filter';\nimport ContactList from './components/ContactList/ContactList';\n\nfunction App() {\n  return (\n    <div>\n      <h1>Phonebook</h1>\n      <ContactForm />\n      <h2>Contacts</h2>\n      <Filter />\n      <ContactList />\n    </div>\n  );\n}\n\nexport default App;\n","import { combineReducers } from 'redux';\nimport { createReducer } from '@reduxjs/toolkit';\nimport actions from './contacts-actions';\n\nconst items = createReducer([], {\n  [actions.addContact]: (state, { payload }) => [...state, payload],\n  [actions.deleteContact]: (state, { payload }) =>\n    state.filter(({ id }) => id !== payload),\n});\n\nconst filter = createReducer('', {\n  [actions.changeFilter]: (_, { payload }) => payload,\n});\n\nexport default combineReducers({\n  items,\n  filter,\n});\n","import { configureStore } from '@reduxjs/toolkit';\nimport {\n  persistStore,\n  persistReducer,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from 'redux-persist';\nimport logger from 'redux-logger';\nimport storage from 'redux-persist/lib/storage';\nimport contactsReducer from './contacts/contacts-reducer';\n\nconst persistConfig = {\n  key: 'root',\n  storage,\n  blacklist: ['filter'],\n};\n\nconst store = configureStore({\n  reducer: {\n    contacts: persistReducer(persistConfig, contactsReducer),\n  },\n  middleware: getDefaultMiddleware =>\n    getDefaultMiddleware({\n      serializableCheck: {\n        ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n      },\n    }).concat(logger),\n  devTools: process.env.NODE_ENV === 'development',\n});\n\nconst persistor = persistStore(store);\n\nexport { store, persistor };\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport { store, persistor } from './redux/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <PersistGate loading={null} persistor={persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__3nLty\",\"button\":\"ContactForm_button__1cFKt\",\"label\":\"ContactForm_label__3S11i\",\"inputName\":\"ContactForm_inputName__274hB\",\"inputNumber\":\"ContactForm_inputNumber__KeRDC\"};"],"sourceRoot":""}